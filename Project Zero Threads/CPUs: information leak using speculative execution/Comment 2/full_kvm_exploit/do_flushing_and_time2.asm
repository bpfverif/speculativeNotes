bits 64
default rel

; pattern: 1,2,1,2, 2,3,2,3, 3,4,3,4 4,1,4,1

; header:
; struct cacheline {
;   struct cacheline *next;
;   u32 access_time;
; };
; void do_flushing_and_time(cacheline *head, cacheline *evictme);

; register allocation
%define r_head rdi
%define r_evictme_head rsi
%define r_cur r8
%define r_next r9
%define r_dummy r10
%define r_serialize_rsp_rip r11
%define r_serialize_segment r12
%define r_t1 r13d
%define load_counter r14

; serialize execution using iretq.
; cpuid is easier, but is often intercepted by the VM, making it terribly
; slow and creating unwanted side effects.
; split macros are for timing-sensitive situations.
%macro SERIALIZE_PREPARE 1
mov r_serialize_rsp_rip, rsp
mov r_serialize_segment, ss
push r_serialize_segment
push r_serialize_rsp_rip
pushf
mov r_serialize_segment, cs
push r_serialize_segment
lea r_serialize_rsp_rip, [%1]
push r_serialize_rsp_rip
%endmacro
%macro SERIALIZE_DO 1
iretq
%1:
%endmacro
%macro SERIALIZE 0
SERIALIZE_PREPARE %%post_iretq
SERIALIZE_DO %%post_iretq
%endmacro

; evict, starting at %1
%macro EVICT_SET 1
cmp %1, 0
je %%end
mov r_cur, %1
%%evict_next:
mov r_next, [r_cur]
clflush [r_cur]
mov r_cur, r_next
cmp r_cur, %1
jne %%evict_next
%%end:
%endmacro

%macro MEASURE_SET 1
cmp %1, 0
je %%end
mov r_cur, %1
%%measure_next:
SERIALIZE_PREPARE %%post_rdtscp
SERIALIZE
rdtscp
mov r_t1, eax
mov r_next, [r_cur]
rdtscp
SERIALIZE_DO %%post_rdtscp
sub eax, r_t1
mov [r_cur + 8], eax
mov r_cur, r_next
cmp r_cur, %1
jne %%measure_next
%%end:
SERIALIZE
%endmacro

%macro PRIME_SET 1
cmp %1, 0
je %%end
mov load_counter, 0
%%outer_load_next:
mov r_cur, %1
%%load_next:
mov r_next, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]

or r_dummy, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]
or r_dummy, [r_cur]
or r_dummy, [r_next]

mov r_cur, r_next
cmp r_cur, %1
jne %%load_next
inc load_counter
cmp load_counter, 20
jne %%outer_load_next
%%end:
%endmacro

; ==============================================================================

; ========= FREE REGISTERS =========
push r12
push r13
push r14
push r15

; ========= MAIN CODE =========
EVICT_SET r_evictme_head
PRIME_SET r_evictme_head
EVICT_SET r_head
PRIME_SET r_head
MEASURE_SET r_head
MEASURE_SET r_evictme_head

; ========= RESTORE REGISTERS =========
restore_regs:
pop r15
pop r14
pop r13
pop r12
ret
